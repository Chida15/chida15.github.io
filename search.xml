<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MacOs如何将md文件批量转为pdf</title>
      <link href="/2024/05/02/MacOs%E5%A6%82%E4%BD%95%E5%B0%86md%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E8%BD%AC%E4%B8%BApdf/"/>
      <url>/2024/05/02/MacOs%E5%A6%82%E4%BD%95%E5%B0%86md%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E8%BD%AC%E4%B8%BApdf/</url>
      
        <content type="html"><![CDATA[<h1 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h1><p>&#x2F;bin&#x2F;bash -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh">https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</a>)”</p><p>如果出现网络问题：修改~&#x2F;.zshrc中的代理和镜像源<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p><h1 id="安装pandoc"><a href="#安装pandoc" class="headerlink" title="安装pandoc"></a>安装pandoc</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pandoc</span><br></pre></td></tr></table></figure><h1 id="批量转换"><a href="#批量转换" class="headerlink" title="批量转换"></a>批量转换</h1><p>递归查找&#x2F;path&#x2F;to&#x2F;parent&#x2F;directory”下的md文件，将其全部转为pdf，然后保存到&#x2F;path&#x2F;to&#x2F;output&#x2F;directory中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path/to/parent/directory -type f -name &quot;*.md&quot; -exec sh -c &#x27;pandoc &quot;$1&quot; -o &quot;/path/to/output/directory/$(basename &quot;$1&quot; .md).pdf&quot;&#x27; _ &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Solutions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day15</title>
      <link href="/2024/05/01/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/"/>
      <url>/2024/05/01/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/</url>
      
        <content type="html"><![CDATA[<h1 id="房屋出租系统"><a href="#房屋出租系统" class="headerlink" title="房屋出租系统"></a>房屋出租系统</h1><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501164239549.png" alt="image-20240501164239549"></p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：分析是从上往下，实现是从下往上</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501112000995.png" alt="image-20240501112000995"></p><h2 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h2><h3 id="工具类Utility"><a href="#工具类Utility" class="headerlink" title="工具类Utility"></a>工具类Utility</h3><p>先准备工具类，提高开发效率。在实际开发中，公司都会提供相应的工具类和开发库。可以直接使用韩老师给的Utility.java</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501112624466.png" alt="image-20240501112624466"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.houserent.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 这是一个测试类</span></span><br><span class="line">        <span class="comment">// 静态方法可以通过类名直接调用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">A</span>().hi();</span><br><span class="line">        A.cry();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  要求输入一个字符串，长度最大为3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Utility.readString(<span class="number">3</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> Utility.readString(<span class="number">10</span>, <span class="string">&quot;yevette&quot;</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="House类"><a href="#House类" class="headerlink" title="House类"></a>House类</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501164633288.png" alt="image-20240501164633288"></p><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501164712132.png" alt="image-20240501164712132"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501165056362.png" alt="image-20240501165056362"></p><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><p>定义House[]，保存House对象</p><h4 id="显示房屋列表"><a href="#显示房屋列表" class="headerlink" title="显示房屋列表"></a>显示房屋列表</h4><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501170405115.png" alt="image-20240501170405115"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501170706650.png" alt="image-20240501170706650"></p><h4 id="添加房屋"><a href="#添加房屋" class="headerlink" title="添加房屋"></a>添加房屋</h4><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501173320989.png" alt="image-20240501173320989"></p><h4 id="删除房屋"><a href="#删除房屋" class="headerlink" title="删除房屋"></a>删除房屋</h4><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501194351379.png" alt="image-20240501194351379"></p><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501201501361.png" alt="image-20240501201501361"></p><h4 id="查找房屋信息"><a href="#查找房屋信息" class="headerlink" title="查找房屋信息"></a>查找房屋信息</h4><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501203746088.png" alt="image-20240501203746088"></p><h4 id="修改房屋信息"><a href="#修改房屋信息" class="headerlink" title="修改房屋信息"></a>修改房屋信息</h4><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day15/image-20240501210010391.png" alt="image-20240501210010391"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>（1）先编写条件不成立的代码，return后再编写条件成立的代码（如果成立后的代码比较多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------修改房屋-----------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择待修改房屋编号(-1退出):&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateId</span> <span class="operator">=</span> Utility.readInt();</span><br><span class="line">        <span class="keyword">if</span> (updateId == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------放弃修改-----------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> houseService.findById(updateId);</span><br><span class="line">        <span class="keyword">if</span> (house == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------编号不存在，修改失败------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="comment">// 这里先编写条件不成立的代码</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 再编写条件成立的代码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;房主(&quot;</span> + house.getHostName() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">        house.setHostName(Utility.readString(<span class="number">4</span>));</span><br><span class="line">        System.out.print(<span class="string">&quot;电话(&quot;</span> + house.getPhoneNum() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">        house.setPhoneNum(Utility.readString(<span class="number">11</span>));</span><br><span class="line">        System.out.print(<span class="string">&quot;地址(&quot;</span> + house.getAddress() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">        house.setAddress(Utility.readString(<span class="number">20</span>));</span><br><span class="line">        System.out.print(<span class="string">&quot;月租(&quot;</span> + house.getMonthlyRent() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">        house.setMonthlyRent(Utility.readInt());</span><br><span class="line">        System.out.print(<span class="string">&quot;状态(&quot;</span> + house.getRentalState() + <span class="string">&quot;)：&quot;</span>);</span><br><span class="line">        house.setRentalState(Utility.readString(<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------修改完成-----------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day14</title>
      <link href="/2024/04/30/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/"/>
      <url>/2024/04/30/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/</url>
      
        <content type="html"><![CDATA[<h1 id="房屋出租系统"><a href="#房屋出租系统" class="headerlink" title="房屋出租系统"></a>房屋出租系统</h1><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/image-20240429214221340.png" alt="image-20240429214221340"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/image-20240429214240640.png" alt="image-20240429214240640"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/image-20240429214259853.png" alt="image-20240429214259853"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/image-20240429214328311.png" alt="image-20240429214328311"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/image-20240429214355513.png" alt="image-20240429214355513"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/image-20240429214448275.png" alt="image-20240429214448275"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day14/image-20240429214503602.png" alt="image-20240429214503602"></p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day13</title>
      <link href="/2024/04/29/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day13/"/>
      <url>/2024/04/29/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day13/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（中级）"><a href="#面向对象编程（中级）" class="headerlink" title="面向对象编程（中级）"></a>面向对象编程（中级）</h1><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day13/image-20240429105415469.png" alt="image-20240429105415469"></p><h3 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h3><p>什么是多态，多态具体体现有哪些？</p><p>（1）多态是指方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承基础之上的</p><p>（2）多态具体体现：</p><p>1.方法多态：方法重载和方法重写</p><p>2.对象多态：对象的编译类型和运行类型可以不一致；编译类型在定义时就确定不能变化，而对象的运行类型可以变化，可以通过getClass()查看；编译类型看定义时等号左边，运行类型看等号右边</p><h3 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h3><p>Java的动态绑定机制是什么?</p><p>（1）当调用对象方法时，该方法会和该对象的内存地址&#x2F;运行类型绑定</p><p>（2）当调用对象属性时，没有动态绑定机制，哪里&#x3D;&#x3D;声明&#x3D;&#x3D;哪里使用</p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day12</title>
      <link href="/2024/04/28/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day12/"/>
      <url>/2024/04/28/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day12/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（中级）"><a href="#面向对象编程（中级）" class="headerlink" title="面向对象编程（中级）"></a>面向对象编程（中级）</h1><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><h4 id="equals和-的对比"><a href="#equals和-的对比" class="headerlink" title="equals和&#x3D;&#x3D;的对比"></a>equals和&#x3D;&#x3D;的对比</h4><p>（1）&#x3D;&#x3D;是一个比较运算符，既可以判断基本类型又可以判断引用类型。判断基本类型判断的是值是否相等（char比较的是数字），判断引用类型判断的是地址是否相等（即是否为同一对象）</p><p>（2）eqauls是Object类中的方法，只能判断引用类型。默认判断地址是否相等，子类中往往重写该方法用于判断内容是否相等，比如Integer、String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yevette&quot;</span>, <span class="number">25</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yevette&quot;</span>, <span class="number">25</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">        System.out.println(person1.equals(person2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断两个Person对象的各个属性值是否相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 地址相同，即为同一个对象，各属性值一定相同</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) obj;</span><br><span class="line">            <span class="keyword">return</span> name.equals(p.name) &amp;&amp; age == p.age &amp;&amp; gender == p.gender;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashcode方法"><a href="#hashcode方法" class="headerlink" title="hashcode方法"></a>hashcode方法</h3><p>返回该对象的哈希码值</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>（1）提高具有哈希结构的容器的效率</p><p>（2）两个引用，如果指向同一个对象，则哈希值肯定一样</p><p>（3）两个引用，如果指向不同对象，则哈希值不一样</p><p>（4）哈希值主要根据地址计算，但并不完全等价于地址（一般是通过将该对象的内部地址转换成一个整数来实现）</p><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>默认返回全类名+@+哈希值的十六进制</p><p>子类往往重写toString方法，用于返回对象的属性信息（可以用cmd+n快速生成）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToString</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="string">&quot;小妖怪&quot;</span>, <span class="string">&quot;巡山&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(monster); <span class="comment">// 直接输出一个对象时，toString方法会被默认调用</span></span><br><span class="line">        System.out.println(monster.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(String name, String job, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monster&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><p>（1）当某个对象没有任何引用时，JVM会认为其是一个垃圾对象，使用垃圾回收机制来销毁该对象，此时系统自动调用该对象的finalize方法</p><p>（2）子类可以重写该方法（fin + 回车或者cmd+n），做一些释放资源的操作(如释放数据库连接、打开的文件等）</p><p>（3）什么时候回收可以由系统决定，也可以通过System.gc()主动触发垃圾回收机制</p><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><h3 id="断点调试快捷键"><a href="#断点调试快捷键" class="headerlink" title="断点调试快捷键"></a>断点调试快捷键</h3><p>（1）跳入方法F7（强制跳入方法shift+option+F7）</p><p>（2）跳出方法shift+F8</p><p>（3）跳过（逐行执行代码）F8</p><p>（4）执行到下一个断点cmd+option+R</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：断点调试过程中是运行状态，是以对象的运行类型执行的</p><h2 id="零钱通项目"><a href="#零钱通项目" class="headerlink" title="零钱通项目"></a>零钱通项目</h2><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day12/image-20240428171935709.png" alt="image-20240428171935709"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day12/image-20240428172034446.png" alt="image-20240428172034446"></p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day10</title>
      <link href="/2024/04/27/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day11/"/>
      <url>/2024/04/27/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day11/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（中级）"><a href="#面向对象编程（中级）" class="headerlink" title="面向对象编程（中级）"></a>面向对象编程（中级）</h1><h2 id="多态（polymorphism）"><a href="#多态（polymorphism）" class="headerlink" title="多态（polymorphism）"></a>多态（polymorphism）</h2><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><h4 id="多态的前提"><a href="#多态的前提" class="headerlink" title="多态的前提"></a>多态的前提</h4><p>多态的前提是两个对象（类）存在继承关系</p><h4 id="多态的向上转型："><a href="#多态的向上转型：" class="headerlink" title="多态的向上转型："></a>多态的向上转型：</h4><p>（1）本质是父类的引用指向子类的对象</p><p>（2）语法：父类类型 引用名 &#x3D; new 子类类型();</p><p>（3）只能调用父类的所有成员（遵守访问权限），不能调用子类中的特有成员（只有子类有），最终运行效果看子类具体实现（重写方法就调用子类的）</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：</p><p>编译器只知道对象的声明类型（即变量的类型），而不知道对象的实际类型（编译器只知道person类型是Person），因此只能调用父类的所有成员（遵守访问权限），不能调用子类中的特有成员（只有子类有）</p><p>但是Java中的方法调用是动态绑定的，即运行阶段程序会根据对象的实际类型调用相应方法，而不是根据对象的声明类型（person.say()实际对象类型是Student），所以输出子类的say方法。总的来说就是方法有重写之说，方法的运行效果看运行类型，但属性没有重写之说，属性的值看编译类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.override;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Override01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;yevette&quot;</span>, <span class="number">25</span>, <span class="string">&quot;38472&quot;</span>, <span class="number">99</span>);</span><br><span class="line">        System.out.println(person.say());</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;person&quot;</span>;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;student&quot;</span>;</span><br><span class="line">    String id;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String id, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.say() + <span class="string">&quot;，我的id是&quot;</span></span><br><span class="line">                + id + <span class="string">&quot;，我的成绩是&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goToSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生上学&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="多态的向下转型"><a href="#多态的向下转型" class="headerlink" title="多态的向下转型"></a>多态的向下转型</h4><p>（1）语法：子类类型 引用名 &#x3D; (子类类型) 父类引用; &#x2F;&#x2F; 强转</p><p>（2）只能强转父类的引用，不能强转父类的对象</p><p>（3）要求父类引用必须指向的是当前目标类型的对象</p><p>（4）可以调用子类类型中所有成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Override01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;yevette&quot;</span>, <span class="number">25</span>, <span class="string">&quot;38472&quot;</span>, <span class="number">99</span>);</span><br><span class="line">        System.out.println(person.say());</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) person;</span><br><span class="line">        student.goToSchool();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）多态的向上转型和向下转型的作用</p><p>一开始是多态的向上转型可以提高代码的复用性（见快速入门），但是偶尔会需要使用子类中的特有成员，因此有了向下转型的概念。如果直接使用子类对象就是静态的，就像一开始的问题那样会有很多重复代码</p><h4 id="多态的属性重写"><a href="#多态的属性重写" class="headerlink" title="多态的属性重写"></a>多态的属性重写</h4><p>（1）属性没有重写之说，属性的值看编译类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Override01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(person.name); <span class="comment">// 结果是person</span></span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">      System.out.println(student.name); <span class="comment">// 结果是student</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）instanceof比较操作符，用于判断对象的&#x3D;&#x3D;运行&#x3D;&#x3D;类型是否为xx类型或xx类型的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Override01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br><span class="line">     <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line">          System.out.println(person <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>（1）编译过程中（即写代码的时候），错误通常都是语法错误。在多态的向上转型时，编译器只知道对象的声明类型，而不知道其实际类型，因此只能调用父类的所有成员，不能调用子类的特有成员（包括属性和方法）</p><p>（2）方法有重写之说，在多态的向上转型中，会按查找关系从对象的运行类型开始向上查找并调用相应方法。但属性没有重写之说，哪里声明哪里使用</p><h3 id="Java的动态绑定机制（Dynamic-Binding）"><a href="#Java的动态绑定机制（Dynamic-Binding）" class="headerlink" title="Java的动态绑定机制（Dynamic Binding）"></a>Java的动态绑定机制（Dynamic Binding）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.poly.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(a.sum()); <span class="comment">// 答案为40。运行阶段，从a的运行类型B开始向上查找并调用相应方法，因此调用的是B中的sum方法</span></span><br><span class="line">        System.out.println(a.sum1()); <span class="comment">// 编译出错。编译阶段，看a的编译类型，因此只能调用A类的成员，此时A中没有sum1方法，因此报错</span></span><br><span class="line">      System.out.println(a.sum2()); <span class="comment">// 答案为25。动态绑定机制，方法和运行类型B类绑定（每次都从运行类型向上查找），因为B类中没有sum2方法，因此找到A类中的sum2方法，但是B类中有getI方法，因此找到B类中的getI方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>; <span class="comment">// 属性没有动态绑定机制，当前类声明，就使用当前类的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public int sum1() &#123;</span></span><br><span class="line">    <span class="comment">//    return i + 10;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">20</span>; <span class="comment">// 这里的属性i声明是public int i = 20，所以i = 20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//public int sum2() &#123;</span></span><br><span class="line">    <span class="comment">//      return getI() + 5;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）当调用对象方法时，该方法会和该对象的内存地址&#x2F;运行类型绑定</p><p>（2）当调用对象属性时，没有动态绑定机制，哪里&#x3D;&#x3D;声明&#x3D;&#x3D;哪里使用</p><h3 id="多态应用"><a href="#多态应用" class="headerlink" title="多态应用"></a>多态应用</h3><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.poly.polyarr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person[] people = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">5</span>];</span><br><span class="line">        people[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        people[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;john&quot;</span>, <span class="number">21</span>, <span class="number">90</span>);</span><br><span class="line">        people[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kitty&quot;</span>, <span class="number">21</span>, <span class="number">89</span>);</span><br><span class="line">        people[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;candy&quot;</span>, <span class="number">31</span>, <span class="number">10000</span>);</span><br><span class="line">        people[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">45</span>, <span class="number">15000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">            System.out.println(people[i].say());</span><br><span class="line">            <span class="keyword">if</span> (people[i] <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">                System.out.println( ((Student) people[i]).study());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (people[i] <span class="keyword">instanceof</span> Teacher) &#123;</span><br><span class="line">                System.out.println(((Teacher) people[i]).teach());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(people[i] <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;其他类型&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.say() + <span class="string">&quot; &quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getName() + <span class="string">&quot;正在学习&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.say() + <span class="string">&quot; &quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getName() + <span class="string">&quot;正在教书&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h4><p>方法定义的形参类型为父类类型，实参类型允许为子类类型，例子见主人喂动物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.poly.polyparameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yevette.poly.Master;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyParameter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Employee jack = new Employee(&quot;jack&quot;, 1000.1);</span></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">3500.80</span>);</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;lucy&quot;</span>, <span class="number">10000.9</span>, <span class="number">5001.7</span>);</span><br><span class="line">        <span class="comment">// 注意可以new公共类，可以在公共类中添加除main方法之外的方法</span></span><br><span class="line">        <span class="type">PolyParameter</span> <span class="variable">polyParameter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PolyParameter</span>();</span><br><span class="line">        polyParameter.showEmpAnnual(jack);</span><br><span class="line">        polyParameter.showEmpAnnual(lucy);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showEmpAnnual</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Worker) &#123;</span><br><span class="line">            ((Worker) e).work();</span><br><span class="line">            System.out.println(<span class="string">&quot;工人&quot;</span> + e.getName() + <span class="string">&quot;年工资是&quot;</span> + e.getAnnual());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ((Manager) e).manage();</span><br><span class="line">            System.out.println(<span class="string">&quot;经理&quot;</span> + e.getName() + <span class="string">&quot;年工资是&quot;</span> + e.getAnnual());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getAnnual();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;员工&quot;</span> + getName() + <span class="string">&quot;正在工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> salary, <span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理&quot;</span> + getName() + <span class="string">&quot;正在管理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getAnnual() + bonus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Intership </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day9</title>
      <link href="/2024/04/25/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day9/"/>
      <url>/2024/04/25/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day9/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（中级）"><a href="#面向对象编程（中级）" class="headerlink" title="面向对象编程（中级）"></a>面向对象编程（中级）</h1><h2 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.extend.improve_;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是Pupil和Graduate的父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生名&quot;</span> + name + <span class="string">&quot; 年龄&quot;</span> + age</span><br><span class="line">                + <span class="string">&quot; 成绩&quot;</span> + score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pupil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.extend.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pupil</span> <span class="keyword">extends</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小学生&quot;</span> + name + <span class="string">&quot;正在考小学数学...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Graduate.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.extend.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graduate</span> <span class="keyword">extends</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大学生&quot;</span> + name + <span class="string">&quot;正在考高等数学...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注</em>：</p><p>（1）子类最多只能继承一个父类（单继承机制）。它继承了所有的属性和方法，但是父类中private和默认修饰的属性和方法不能在子类中直接访问（同包的话父类中默认修饰的属性和方法可以在子类中直接访问），可以通过公共方法访问</p><p>（2）Java所有类都是Object类的子类（Object是顶级父类）</p><p>（3）子类必须调用父类的构造器，完成父类的初始化（先调用父类的再调用子类的）。父类构造器的调用将一直向上追溯到Object类</p><p>（4）当创建子类对象时，不管使用子类哪个构造器，默认情况下都会调用父类的无参构造器（或者super();）。若父类未提供无参构造器，则子类的构造器中必须用super显式指定使用父类的哪个构造器，否则编译不通过</p><p>Base.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.extend.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="comment">//    public Base() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;父类Base()被调用&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String name)</span> &#123; <span class="comment">// 有参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base(String name)被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sub.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.extend.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类的Sub()被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类的Sub(String name)被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）super需要放在构造器第一行，this也只能放在构造器第一行，因此两个方法不能共存在一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.extend.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">// 找到B()执行this(&quot;abc&quot;)</span></span><br><span class="line">        <span class="comment">// 找到B(String name)，执行默认的super()</span></span><br><span class="line">        <span class="comment">// 找到A()执行，再一层层返回</span></span><br><span class="line">        <span class="comment">// a-b name-b</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    A() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    A(String name) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    B() &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">// 有了this就没有super</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    B(String name) &#123;</span><br><span class="line">      <span class="comment">// 默认有super();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）不能滥用继承，子类和父类必须满足is-a的逻辑关系。如cat is a animal（√），person is a music（×）</p><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day9/image-20240425150434390.png" alt="image-20240425150434390"></p><p>堆中的是Son对象</p><p><em>注</em>：同名属性按照查找关系来返回。如果子类有该属性且可以访问就返回，如果不能访问就报错。如果子类没有该属性则向上看父类是否有该属性且可以访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.extend.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(son.name); <span class="comment">// 报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;爷爷&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;爸爸&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">39</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;儿子&quot;</span>; <span class="comment">// 子类有name属性但不能访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>super代表父类的引用（this代表本类的引用）</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>super可以用来访问父类的属性、方法和构造器。其中访问构造器的语法：super(参数列表);（必须是构造器中的第一个语句）</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>（1）当子类中有和父类中的成员（属性和方法）重名时，为了访问父类成员，必须通过super。若无重名，则使用super、this和直接访问效果是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">A</span>().func(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(b); <span class="comment">// b=3</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.b);  <span class="comment">// b=2</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.b);  <span class="comment">// b=1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）可以指定调用父类的构造器使得分工明确（父类属性由父类构造器初始化，子类属性由子类构造器初始化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> memory, disk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, <span class="type">int</span> memory, <span class="type">int</span> disk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">        <span class="built_in">this</span>.disk = disk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu + <span class="string">&quot;\t&quot;</span> + memory + <span class="string">&quot;\t&quot;</span> + disk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PC</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PC</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PC</span><span class="params">(String cpu, <span class="type">int</span> memory, <span class="type">int</span> disk, String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cpu, memory, disk); <span class="comment">// 父类构造器完成父类属性初始化</span></span><br><span class="line">        <span class="built_in">this</span>.brand = brand; <span class="comment">// 子类构造器完成子类特有属性初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PC信息如下：&quot;</span>);</span><br><span class="line">        System.out.println(getDetails() + <span class="string">&quot;\t&quot;</span> + brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super和this的区别"><a href="#super和this的区别" class="headerlink" title="&#x3D;&#x3D;super和this的区别&#x3D;&#x3D;"></a>&#x3D;&#x3D;super和this的区别&#x3D;&#x3D;</h3><p>（1）this代表本类引用（指向本类对象），super代表父类引用（指向父类对象）</p><p>（2）属性和方法：this从本类开始查找属性和方法，super从父类开始查找属性和方法</p><p>（3）构造器：this调用本类构造器，必须放在构造器首行，super调用父类构造器，必须放在子类构造器首行。因此两个方法不能共存于一个构造器</p><h3 id="继承总结"><a href="#继承总结" class="headerlink" title="&#x3D;&#x3D;继承总结&#x3D;&#x3D;"></a>&#x3D;&#x3D;继承总结&#x3D;&#x3D;</h3><p>（1）子类会继承所有父类的属性和方法，然后根据访问修饰符控制访问范围（父类protected对不同包的子类也公开，父类默认对不同包的子类不公开）</p><p>（2）this和直接访问都是从本类找起（区别是有局部变量时，this指的是属性，直接访问时局部变量），从下往上找第一个符合的属性或方法，判断其访问权限，若无权则报错，否则返回。而super是从直接父类找起</p><h2 id="方法重写-覆盖（override）"><a href="#方法重写-覆盖（override）" class="headerlink" title="方法重写&#x2F;覆盖（override）"></a>方法重写&#x2F;覆盖（override）</h2><p>方法重写是指</p><p>（1）子类方法名称和形参列表与父类的一样</p><p>（2）子类方法返回类型和父类的一样，或是父类返回类型的子类。比如父类方法返回类型Object，子类方法返回类型是String</p><p>（3）子类方法的修饰符不能缩小父类方法的访问范围</p><p>则子类的方法覆盖了父类的方法</p><h3 id="方法重载overload和方法重写override的异同"><a href="#方法重载overload和方法重写override的异同" class="headerlink" title="&#x3D;&#x3D;方法重载overload和方法重写override的异同&#x3D;&#x3D;"></a>&#x3D;&#x3D;方法重载overload和方法重写override的异同&#x3D;&#x3D;</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day9/image-20240425205752140.png" alt="image-20240425205752140"></p><p>可变参数：1）发生范围是本类，（2）只有一个方法（3）形参列表使用…表示接收0-多个参数（4）可变参数本质是一个数组</p><h2 id="多态（polymorphism）"><a href="#多态（polymorphism）" class="headerlink" title="多态（polymorphism）"></a>多态（polymorphism）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题：如果养了很多动物，feed方法就会越来越多，不利于管理和维护</span></span><br><span class="line"><span class="keyword">package</span> com.yevette.poly;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog dog, Bone bone)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人&quot;</span> + name + <span class="string">&quot;喂&quot;</span></span><br><span class="line">                + dog.getName() + <span class="string">&quot;吃&quot;</span> + bone.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat, Fish fish)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人&quot;</span> + name + <span class="string">&quot;喂&quot;</span></span><br><span class="line">                + cat.getName() + <span class="string">&quot;吃&quot;</span> + fish.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多态是指方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承基础之上的。它是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而在程序运行期间才确定（多态的向上转型）。它可以提高代码复用性、维护性和可扩展性</p><h3 id="多态的具体表现"><a href="#多态的具体表现" class="headerlink" title="多态的具体表现"></a>多态的具体表现</h3><h4 id="方法的多态"><a href="#方法的多态" class="headerlink" title="方法的多态"></a>方法的多态</h4><p>重写和重载可以体现多态</p><h4 id="对象的多态"><a href="#对象的多态" class="headerlink" title="对象的多态"></a>对象的多态</h4><p>（1）一个对象的编译类型和运行类型可以不一致</p><p>（2）编译类型在定义对象时就确定了，不能改变。但运行类型是可以变化的</p><p>（3）编译类型看定义时&#x3D;左边，运行类型看&#x3D;右边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 父类的引用可以指向子类的一个对象，则animal编译类型是Animal，运行类型是Dog</span></span><br><span class="line">animal = <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">// animal运行类型变成Cat，编译类型仍是Animal</span></span><br></pre></td></tr></table></figure><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.poly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 用父类Animal接收子类Cat或Dog对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal, Food food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人&quot;</span> + name + <span class="string">&quot;喂&quot;</span></span><br><span class="line">                + animal.getName() + <span class="string">&quot;吃&quot;</span> + food.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day8</title>
      <link href="/2024/04/24/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day8/"/>
      <url>/2024/04/24/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day8/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（基础）"><a href="#面向对象编程（基础）" class="headerlink" title="面向对象编程（基础）"></a>面向对象编程（基础）</h1><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p><em>注</em>：</p><p>（1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count1</span><span class="params">()</span> &#123;</span><br><span class="line">count = <span class="number">10</span>;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(count++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// new Test()是匿名对象，没有引用，在堆里只能用一次</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Test</span>().count1();</span><br><span class="line"><span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">t1.count2();</span><br><span class="line">t1.count2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）随机数生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt(<span class="number">3</span>); <span class="comment">// 返回0-2的随机数</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> r.nextDouble();</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Math.random();</span><br><span class="line"><span class="comment">// Math.random()和r.nextDouble()都返回[0,1)的随机double类型数，但是前者是静态方法可以直接使用，后者需要先创建Random对象，才可以调用方法</span></span><br></pre></td></tr></table></figure><h1 id="面向对象编程（中级）"><a href="#面向对象编程（中级）" class="headerlink" title="面向对象编程（中级）"></a>面向对象编程（中级）</h1><h2 id="IDEA的使用"><a href="#IDEA的使用" class="headerlink" title="IDEA的使用"></a>IDEA的使用</h2><h3 id="常用快捷键（settings-keymap）"><a href="#常用快捷键（settings-keymap）" class="headerlink" title="常用快捷键（settings-keymap）"></a>常用快捷键（settings-keymap）</h3><p>（1）删除delete当前行cmd+delete</p><p>（2）复制duplicate当前行cmd+d</p><p>（3）快速格式化format代码cmd+option+l</p><p>（4）补全complete代码 option+&#x2F;</p><p>（5）导入需要的类（自动导入）option+enter</p><p>（6）生成generate构造器等cmd+n或者ctrl+enter</p><p>（7）查看一个类的层级关系ctrl+h（右边栏-Hierachy）</p><p>（8）定位对应类、方法、属性cmd+b（光标放在对应位置）或者cmd+鼠标左键</p><p>（9）自动分配变量名.var</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).<span class="keyword">var</span>然后回车</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyTools</span>().<span class="keyword">var</span>然后回车</span><br></pre></td></tr></table></figure><h3 id="模板（settings-editor-Live-Templates）"><a href="#模板（settings-editor-Live-Templates）" class="headerlink" title="模板（settings-editor-Live Templates）"></a>模板（settings-editor-Live Templates）</h3><p>（1）主方法：main+enter</p><p>（2）println：sout+enter</p><p>（3）for循环：fori</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>创建不同的文件夹来保存类文件</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>（1）区分相同名字的类</p><p>（2）类很多的时候更好地管理类</p><p>（3）控制访问范围</p><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><h4 id="命名规则（一定遵守）"><a href="#命名规则（一定遵守）" class="headerlink" title="命名规则（一定遵守）"></a>命名规则（一定遵守）</h4><p>只能包含数字、字母、下划线和小圆点，不能数字开头，不能是关键字或保留字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">demo.class.exec1 <span class="comment">// 不行，class是关键字</span></span><br><span class="line">demo.12a <span class="comment">// 不行，数字开头</span></span><br><span class="line">demo.ab12.oa <span class="comment">// 可以</span></span><br></pre></td></tr></table></figure><h4 id="命名规范（最好遵守）"><a href="#命名规范（最好遵守）" class="headerlink" title="命名规范（最好遵守）"></a>命名规范（最好遵守）</h4><p>一般是小写字母+小圆点，com.公司名.项目名.业务模块名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.sina.crm.user <span class="comment">// 用户模块</span></span><br><span class="line">com.alibaba.ai.util <span class="comment">// 工具类，类名可以为MessageUtils</span></span><br></pre></td></tr></table></figure><p><em>注</em>：包名同一使用单数形式，但是类名如果有复数含义可以使用复数形式</p><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.* <span class="comment">// lang包是基本包，默认引入，如Math、System</span></span><br><span class="line">java.util.* <span class="comment">// util包，系统提供的工具包，如Scanner</span></span><br><span class="line">java.net.* <span class="comment">// 网络包，网络开发</span></span><br><span class="line">java.awt.* <span class="comment">// Abstract Window Toolkit，Java的GUI开发</span></span><br></pre></td></tr></table></figure><h3 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h3><p>（1）src-新建package-输入com.xiaoming</p><p>（2）在xiaoming下面创建Dog类</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day8/image-20240424163652048.png" alt="image-20240424163652048"></p><p>（3）Dog.java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoming; <span class="comment">// 声明当前类所在包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）使用包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.use;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoming.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">        com.xiaoqiang.<span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.xiaoqiang.Dog();</span><br><span class="line">        System.out.println(dog1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><p>引入一个包是为了使用该包下的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建议使用哪个类导入哪个类</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// 引入util包下的Scanner类</span></span><br><span class="line"><span class="keyword">import</span> java.util.*; <span class="comment">// 引入util包下的所有类</span></span><br></pre></td></tr></table></figure><p><em>注</em>：</p><p>（1）package需要放在类的最上面，一个类最多只有一个</p><p>（2）import放在package下面，在类定义前面，可以有多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.use;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>访问修饰符用于控制属性的访问范围</p><p>（1）公开级别：public，对外公开</p><p>（2）受保护级别：protected，对子类（不同包）和同一个包中的类公开</p><p>（3）默认级别：无修饰符，对同一个包的类（包括同包子类）公开</p><p>（4）私有级别：private，只有类本身可以访问</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day8/image-20240424171805404.png" alt="image-20240424171805404"></p><p><em>注</em>：</p><p>（1）默认和protected的区别就是protected对所有子类公开，无所谓同包不同包。但是默认只对同包子类公开</p><p>（2）每个类都对应一个.class文件。一个源文件中最多只能有一个public类，文件名必须以该类名命名。main方法也可以写在非public类中，然后指定运行非public类</p><p>（3）修饰符可以用来修饰属性、方法和类。但只有默认和public可以修饰类（一个源文件中最多只能有一个public类，文件名必须以该类名命名）</p><h2 id="封装（encapsulation）"><a href="#封装（encapsulation）" class="headerlink" title="封装（encapsulation）"></a>封装（encapsulation）</h2><p>&#x3D;&#x3D;将属性和方法封装在一个类中，并因此类的内部细节，只暴露必要的接口供外部访问&#x3D;&#x3D;</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>（1）隐藏实现细节，提供清晰接口供外部使用</p><p>（2）提高代码安全性，防止内部数据被直接访问</p><p>（2）降低代码耦合度，使类的修改对外部代码影响最小化</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>（1）属性私有化private（不能直接修改属性）</p><p>（2）提供一个public的set方法，用于对属性判断并赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXxx</span><span class="params">(参数列表)</span> &#123; <span class="comment">// Xxx表示某个属性</span></span><br><span class="line"><span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）提供一个public的get方法，用于获取属性的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> XX <span class="title function_">getXxx</span><span class="params">()</span> &#123; <span class="comment">//权限判断</span></span><br><span class="line"><span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注</em>：构造器初始化时其实也需要验证数据，可以用异常</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yevette.encapsulation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不能随便查看人的年龄，工资等隐私信息，并对年龄进行验证，</span></span><br><span class="line"><span class="comment">年龄必须在1-120之间，否则设置默认年龄。工资不能随便查看，</span></span><br><span class="line"><span class="comment">name长度在2-6字符之间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encapsulation01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Person person = new Person();</span></span><br><span class="line"><span class="comment">//        person.setName(&quot;yevette&quot;);</span></span><br><span class="line"><span class="comment">//        person.setAge(3000);</span></span><br><span class="line"><span class="comment">//        person.setSalary(30000);</span></span><br><span class="line"><span class="comment">//        System.out.println(person.showInfo());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">2000</span>, <span class="number">50000</span>);</span><br><span class="line">        System.out.println(smith.showInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">  <span class="comment">// 使用set来设置构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//        this.age = age;</span></span><br><span class="line"><span class="comment">//        this.salary = salary;</span></span><br><span class="line">        setName(name);</span><br><span class="line">        setAge(age);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己写set和get方法太慢，可以使用快捷键</span></span><br><span class="line">    <span class="comment">// ctrl+n选择Getter and Setter</span></span><br><span class="line">    <span class="comment">// 然后根据要求完善代码</span></span><br><span class="line">  <span class="comment">// 如果要写单个的就用setXxx或者getXxx然后回车</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt;= <span class="number">2</span> &amp;&amp; name.length() &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;名字长度错误，需要2-6&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;佚名&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">1</span> &amp;&amp; age &lt;= <span class="number">120</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄需要在1-120&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">18</span>; <span class="comment">// 设置默认年龄</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息为 name=&quot;</span> + name + <span class="string">&quot; age=&quot;</span> + age</span><br><span class="line">                + <span class="string">&quot; salary=&quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h2><p>&#x3D;&#x3D;继承允许一个子类基于另一个父类进行扩展，从而继承父类的属性和方法，并可以新增或修改自己的属性和方法&#x3D;&#x3D;</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day8/image-20240424213519789.png" alt="image-20240424213519789"></p><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>（1）提高代码的复用性，避免重复编写相似代码</p><p>（2）提高代码的扩展性，可以通过继承添加新的功能或修改现有功能</p><p>（3）提高代码的可维护性，使得代码的组织更加清晰和结构化，便于理解和维护</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>class 子类 extends 父类 {</p><p>}</p><p><em>注</em>：</p><p>（1）父类又叫超类、基类，子类又叫派生类</p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day7</title>
      <link href="/2024/04/23/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day7/"/>
      <url>/2024/04/23/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day7/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（基础）"><a href="#面向对象编程（基础）" class="headerlink" title="面向对象编程（基础）"></a>面向对象编程（基础）</h1><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><p>（1）基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参</p><p>（2）引用类型传递的是地址（地址也是值的一种），形参可以影响实参</p><h2 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h2><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day7/image-20240423094003782.png" alt="image-20240423094003782"></p><p>（1）猴子吃桃子：一堆桃子，猴子第一天吃其中一半并多吃了一个，以后每天都吃其中一半然后多吃一个，到第十天想吃时只剩下一个桃子。问最初共多少个桃子？</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day7/image-20240423102846749.png" alt="image-20240423102846749"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyTools</span> &#123;</span><br><span class="line">  <span class="comment">// 固定从第一天开始，但是可以改变最后一天</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> func(n - <span class="number">1</span>) * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 固定最后一天为第是天，从1-10天开始。假设从第9天开始这样吃，吃到第10天只剩1个，可以求出第9天有4个</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> func1(n + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>（2）迷宫&#x2F;汉诺塔&#x2F;八皇后</p><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>Java允许同一个类中多个同名方法的存在，但要求形参列表不一致。减轻了起名&#x2F;记名的麻烦</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arfs)</span> &#123;</span><br><span class="line"><span class="type">MyCalculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalculator</span>();</span><br><span class="line">System.out.println(calculator.calculate(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalculator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 没有构成方法重载</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 没有构成方法重载</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 构成方法重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2, <span class="type">int</span> n3)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2 + n3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注</em>：</p><p>（1）输入为1和2，如果有int，int就用，没有可以用double，int或int，double或double，double</p><p>（2）相同类，相同方法名，不同的形参列表（参数类型、个数、顺序，参数名无要求），返回类型无要求</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>Java将同一个类多个同名同功能但参数个数不同的方法封装成一个方法，可以用过可变参数实现</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>访问修饰符 返回类型 方法名（数据类型… 形参名）{<br>}</p><p><em>注</em>：</p><p>（1）可变参数的实参可以是数组</p><p>（2）可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</p><p>（3）一个形参列表只能出现一个可变参数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Methods</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Methods</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> m.sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 或者传入数组，效果同上</span></span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> m.sumNum(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Methods</span> &#123;</span><br><span class="line"><span class="comment">// int... 表示接收的是可变参数，类型是int，可以接收多个int(0-多)</span></span><br><span class="line"><span class="comment">// 使用可变参数时，可以当做数组来使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumNum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)</span><br><span class="line">sum += nums[i];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Methods</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Methods</span>();</span><br><span class="line">    System.out.println(m.showScore(<span class="string">&quot;yevette&quot;</span>, <span class="number">90</span>, <span class="number">91.6</span>, <span class="number">99.8</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Methods</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">showScore</span><span class="params">(String name, <span class="type">double</span>... scores)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">sum += scores[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name + <span class="string">&quot;的总成绩为&quot;</span> + sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>在Java中，主要的变量就是局部变量和成员变量（属性）。其中局部变量一般指在成员方法中定义的变量</p><h3 id="Java中作用域分类"><a href="#Java中作用域分类" class="headerlink" title="Java中作用域分类"></a>Java中作用域分类</h3><p>（1）全局变量：即&#x3D;&#x3D;属性&#x3D;&#x3D;，作用域为整个Cat类，该类的所有方法都可以使用该变量</p><p>（2）局部变量：除属性之外的其他变量，作用域为定义它的代码块</p><p><em>注</em>：</p><p>（1）全局变量（属性）有默认值可以不赋值，局部变量没有默认值，必须赋值后才能使用</p><p>（2）全局变量&#x2F;方法可以被本类使用，或其他类使用（通过对象调用），局部变量只能在本类的对应方法中使用</p><p>（3）全局变量可以加修饰符，局部变量不可以加修饰符</p><h2 id="构造方法-构造器（constructor）"><a href="#构造方法-构造器（constructor）" class="headerlink" title="构造方法&#x2F;构造器（constructor）"></a>构造方法&#x2F;构造器（constructor）</h2><p>完成对新对象的初始化</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p>访问修饰符 方法名(形参列表){</p><p>}</p><p><em>注</em>：</p><p>（1）构造器没有返回值</p><p>（2）方法名同类名</p><p>（3）创建对象时，os会自动调用该类的构造器完成对象的初始化</p><p>（4）新的构造器会覆盖原来无参构造器，除非显式定义。构造器可以重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">18</span>);</span><br><span class="line">System.out.println(p.name + <span class="string">&quot; &quot;</span> + p.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">  Person()&#123;&#125;</span><br><span class="line">  Person(String pName) &#123;</span><br><span class="line">    name = pName;</span><br><span class="line">  &#125;</span><br><span class="line">Person(String pName, <span class="type">int</span> pAge) &#123;</span><br><span class="line">name = pName;</span><br><span class="line">age = pAge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象的流程分析（使用自定义构造器）"><a href="#创建对象的流程分析（使用自定义构造器）" class="headerlink" title="创建对象的流程分析（使用自定义构造器）"></a>创建对象的流程分析（使用自定义构造器）</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day7/image-20240423201916709.png" alt="image-20240423201916709"></p><p>（1）加载Person类信息（只会加载一次）</p><p>（2）在堆中分配空间（地址）</p><p>（3）完成对象初始化：先&#x3D;&#x3D;默认初始化&#x3D;&#x3D;（age&#x3D;0，name&#x3D;null），再&#x3D;&#x3D;显式初始化&#x3D;&#x3D;（age&#x3D;90），最后&#x3D;&#x3D;使用构造器初始化&#x3D;&#x3D;（age&#x3D;20，name&#x3D;”小倩”）</p><p>（4）把对象在堆中的地址返回给p（对象的引用）</p><p><em>注</em>：属性的默认值是Java运行时os自动提供的，而不是构造器赋予的（构造器在初始化过程中才用到）</p><h2 id="this关键词"><a href="#this关键词" class="headerlink" title="this关键词"></a>this关键词</h2><p>哪个对象调用，this就代表哪个对象</p><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><p>this可以用来访问本类的属性、方法和构造器。其中访问构造器的语法：this(参数列表);（必须是构造器中的第一个语句）</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>（1）this用于区分当前类的属性和局部变量：this.name一定是属性，name可能是局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">Person()&#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="string">&quot;默认&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person(String name) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Smith&quot;</span>;</span><br><span class="line">System.out.println(name); <span class="comment">// Smith</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.name); <span class="comment">// 默认</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）构造器的复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this访问构造器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">String name, pos;</span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">double</span> sal;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String pos, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.pos = pos;</span><br><span class="line"><span class="built_in">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">char</span> gender, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">char</span> gender, <span class="type">int</span> age, String pos, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(name, gender, age); <span class="comment">// 构造器的复用</span></span><br><span class="line"><span class="built_in">this</span>.pos = pos;</span><br><span class="line"><span class="built_in">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day7/image-20240423205100763.png" alt="image-20240423205100763"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tim&quot;</span>, <span class="number">21</span>);</span><br><span class="line">System.out.println(p1.compareTo(p2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(Person p)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>（1）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">A01</span> <span class="variable">a01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A01</span>();</span><br><span class="line">    <span class="comment">// &#123;&#125;和null是不一样的</span></span><br><span class="line">    <span class="comment">// 堆中分配了地址空间，arr.length = 0</span></span><br><span class="line"><span class="type">double</span>[] arr = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 没有在堆中分配地址空间</span></span><br><span class="line"><span class="type">double</span>[] arr1 = <span class="literal">null</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">res</span> <span class="operator">=</span> a01.max(arr1);</span><br><span class="line"><span class="keyword">if</span> (res != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数组不合理&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A01</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Double和double是不一样的</span></span><br><span class="line">  <span class="comment">// double是基本数据类型，Double是其对应的封装类</span></span><br><span class="line">  <span class="comment">// 可以简单的看做Double=double+null</span></span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">max</span><span class="params">(<span class="type">double</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr != <span class="literal">null</span> &amp;&amp; arr.length &gt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; arr[i]) max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用异常，但是这里还没学</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day6</title>
      <link href="/2024/04/22/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day6/"/>
      <url>/2024/04/22/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day6/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程（基础）"><a href="#面向对象编程（基础）" class="headerlink" title="面向对象编程（基础）"></a>面向对象编程（基础）</h1><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法调用机制"><a href="#方法调用机制" class="headerlink" title="方法调用机制"></a>方法调用机制</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day6/image-20240422095656528.png" alt="image-20240422095656528"></p><p><em>注</em>：</p><p>（1）当程序执行到方法时，会开辟一个独立空间（栈空间）</p><p>（2）栈（独立）：主要用于存储方法调用信息和局部变量。当线程进入一个Java方法时，就会在当前线程的栈里压入一个栈帧，用于保存当前线程的状态（&#x3D;&#x3D;参数、局部变量、中间计算过程和其他数据&#x3D;&#x3D;），当退出方法时，修改栈指针就可以把栈中的内容销毁（调用一个方法就会产生一个压入一个栈帧）</p><p>堆（共享）：主要用于存储&#x3D;&#x3D;对象实例和数组&#x3D;&#x3D;</p><p>方法区：主要存放类加载信息。在JDK6.0及之前版本，字符串常量池是放在方法区中； 在JDK7.0版本，字符串常量池被移到了堆中</p><p>从功能和作用来通俗的比较，堆主要用来存放对象的，栈主要是用来执行程序的</p><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><p>（1）方法可以用数组&#x2F;对象返回多个结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用数组返回多个同类型的结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arfs)</span> &#123;</span><br><span class="line"><span class="type">AA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line"><span class="type">int</span>[] res = a.getSumAndSub(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(res[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + res[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] getSumAndSub(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line"><span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">res[<span class="number">0</span>] = x + y;</span><br><span class="line">res[<span class="number">1</span>] = x - y;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用对象返回多个不同类型的结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arfs)</span> &#123;</span><br><span class="line"><span class="type">AA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> a.getSumAndAvg(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(res.sum + <span class="string">&quot; &quot;</span> + res.avgSum + <span class="string">&quot; &quot;</span> + res.size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"><span class="type">double</span> sum;</span><br><span class="line"><span class="type">double</span> avgSum;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSumAndAvg</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">res.sum = x + y;</span><br><span class="line">res.size = <span class="number">2</span>;</span><br><span class="line">res.avgSum = res.sum / res.size;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）方法的调用：同一个类的方法可以直接调用；跨类中的方法需要通过对象名调用</p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day5</title>
      <link href="/2024/04/21/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day5/"/>
      <url>/2024/04/21/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day5/</url>
      
        <content type="html"><![CDATA[<h1 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h1><h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><p>break、continue、return</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>（1）String用equals方法进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;林黛玉&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;林黛玉&quot;</span>.equals(name)); <span class="comment">// 具体的字符串写前面可以避免空指针异常</span></span><br></pre></td></tr></table></figure><p>（2）随机数生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random() * <span class="number">100</span>) + <span class="number">1</span>; <span class="comment">// 生成1-100的随机整数</span></span><br></pre></td></tr></table></figure><h1 id="数组、排序和查找"><a href="#数组、排序和查找" class="headerlink" title="数组、排序和查找"></a>数组、排序和查找</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arfs)</span> &#123;</span><br><span class="line"><span class="type">double</span>[] hens = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3.4</span>, <span class="number">2</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 数组长度hens.length</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; hens.length; i++)&#123;</span><br><span class="line">sum += hens[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum + <span class="string">&quot; &quot;</span> + sum / hens.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">// 动态初始化</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a;</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;; <span class="comment">// 静态初始化</span></span><br><span class="line"><span class="comment">// 数组的默认值：int/short/byte/long:0，float/double:0.0，char:\u0000,boolean:false, String:null</span></span><br></pre></td></tr></table></figure><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><p>（1）基本数据类型赋值&#x2F;传递方式为值传递&#x2F;值拷贝，数组赋值&#x2F;传递方式为引用传递，赋的值是地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>, n2 = n1;</span><br><span class="line">n2 = <span class="number">80</span>; <span class="comment">// n1不变</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, arr2 = arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">// arr1[0] = 10</span></span><br></pre></td></tr></table></figure><p>（2）值传递和引用传递的区别</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day5/image-20240421152738593.png" alt="image-20240421152738593"></p><p>（3）数组拷贝&#x2F;内容拷贝：数据空间独立</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day5/image-20240421153431065.png" alt="image-20240421153431065"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++)&#123;</span><br><span class="line">  arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h3><p>创建一个新的更大容量数组，存放原先数组</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="二维数组快速入门"><a href="#二维数组快速入门" class="headerlink" title="二维数组快速入门"></a>二维数组快速入门</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arfs)</span> &#123;</span><br><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, </span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,&#125;, </span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++)&#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">// 动态初始化</span></span><br><span class="line"><span class="type">int</span>[][] a = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, </span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,&#125;, </span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">8</span>&#125;&#125;; <span class="comment">// 静态初始化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][]; <span class="comment">// 动态初始化，列数不确定</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">    arr[i][j] = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">    System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组内存布局"><a href="#二维数组内存布局" class="headerlink" title="二维数组内存布局"></a>二维数组内存布局</h4><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day5/image-20240421165705757.png" alt="image-20240421165705757"></p><h3 id="C-与Java在数组变量声明上的区别"><a href="#C-与Java在数组变量声明上的区别" class="headerlink" title="&#x3D;&#x3D;C++与Java在数组变量声明上的区别&#x3D;&#x3D;"></a>&#x3D;&#x3D;C++与Java在数组变量声明上的区别&#x3D;&#x3D;</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x[<span class="number">3</span>], y; <span class="comment">// C++中y是整型</span></span><br><span class="line"><span class="type">int</span>[] x, y; <span class="comment">// Java中y是一维数组</span></span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在有序数组中插入一个数仍保持其有序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arfs)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">90</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">insertNum</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (insertNum &lt; arr[i]) &#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">newArr[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index == -<span class="number">1</span>) index = arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != index) &#123;</span><br><span class="line">newArr[i] = arr[j++];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newArr[i] = insertNum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr = newArr;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象编程（基础）"><a href="#面向对象编程（基础）" class="headerlink" title="面向对象编程（基础）"></a>面向对象编程（基础）</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arfs)</span> &#123;</span><br><span class="line">    <span class="comment">// new Cat()创建的对象空间（数据）才是真正的对象，cat1是对象名（对象引用）</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat1.name = <span class="string">&quot;xiaohua&quot;</span>;</span><br><span class="line">cat1.color = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">cat1.age = <span class="number">2</span>;</span><br><span class="line">System.out.println(cat1.name + <span class="string">&quot; &quot;</span> + cat1.color + <span class="string">&quot; &quot;</span> + cat1.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">String name, color;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day5/image-20240421210144140.png" alt="image-20240421210144140"></p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day5/image-20240421212547291.png" alt="image-20240421212547291"></p><h4 id="创建对象的流程分析（使用无参构造器）"><a href="#创建对象的流程分析（使用无参构造器）" class="headerlink" title="创建对象的流程分析（使用无参构造器）"></a>创建对象的流程分析（使用无参构造器）</h4><p>（1）加载Cat类信息（属性信息，方法信息，只会加载一次）</p><p>（2）在堆中分配空间（对象），进行默认初始化</p><p>（3）把地址赋给cat，cat就指向对象</p><p>（3）进行指定初始化</p><h3 id="属性-成员变量-全局变量-field（字段）"><a href="#属性-成员变量-全局变量-field（字段）" class="headerlink" title="属性&#x2F;成员变量&#x2F;全局变量&#x2F;field（字段）"></a>属性&#x2F;成员变量&#x2F;全局变量&#x2F;field（字段）</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>（1）属性的定义语法同变量，示例：访问修饰符 属性类型 属性名;</p><p>访问修饰符用于控制属性的访问范围，分为默认、public、private、protected</p><p>（2）属性如果不赋值，默认值同数组的默认初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="type">int</span> age; <span class="comment">// 默认值为0</span></span><br><span class="line">String name; <span class="comment">// 默认值为null</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">double</span> sal; <span class="comment">// 默认值为0。0</span></span><br><span class="line"><span class="type">boolean</span> ; <span class="comment">// 默认值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day4</title>
      <link href="/2024/04/20/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day4/"/>
      <url>/2024/04/20/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day4/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="&amp;&amp;和&amp;的区别"></a>&amp;&amp;和&amp;的区别</h3><p>（1）&amp;&amp;短路与：如果第一个条件为false，后面不会再判断</p><p>（2）&amp;逻辑与：如果第一个条件为false，后面仍会判断</p><p><em>注意</em>：Java中不能用0或1表示false或true，这和C++中不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">    <span class="comment">// 如果是if (year % 4 == 0 &amp;&amp; year % 100  || year % 400 == 0)则错误，因为year % 100答案为0或1是int型不是boolean型</span></span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;是闰年！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;是平年！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 等价 b = (byte)(b + 2);</span></span><br><span class="line"><span class="comment">// b = b + 2则错误，因为int不能转为byte</span></span><br><span class="line">b++; <span class="comment">// 等价 b = (byte)(b + 1);</span></span><br></pre></td></tr></table></figure><h2 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// 导入java.util包下的Scanner类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建Scanner对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字:&quot;</span>);</span><br><span class="line"><span class="comment">// 接收用户输入</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入性别:&quot;</span>);</span><br><span class="line">    <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪水:&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> myScanner.nextDouble();</span><br><span class="line">System.out.println(<span class="string">&quot;名字\t性别\t年龄\t薪水\n&quot;</span></span><br><span class="line">+ name + <span class="string">&#x27;\t&#x27;</span> + gender + <span class="string">&#x27;\t&#x27;</span> + age + <span class="string">&#x27;\t&#x27;</span> + salary);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day4/image-20240420144128196.png" alt="image-20240420144128196"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">10.5</span> % <span class="number">3</span>; <span class="comment">// 结果为-1.5</span></span><br></pre></td></tr></table></figure><h1 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h1><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (b = <span class="literal">false</span>) <span class="comment">// 不执行if语句，b变成false</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b)</span><br><span class="line">  System.out.println(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!b)</span><br><span class="line">  System.out.println(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  System.out.println(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day4/image-20240420163342350.png" alt="image-20240420163342350"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印月份所属季节</span></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>, <span class="number">1</span>, <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;错误月份&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用穿透</span></span><br><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;错误月份&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注</em>：</p><p>（1）表达式的数据类型和case后的常量类型一致，或可以自动转换相互比较，比如输入的是字符而常量是int</p><p>（2）表达式的返回值必须为byte、short、int、char、enum、String</p><p>（3）如果判断的具体数值不多，且符合表达式返回值类型，则用switch；如果对区间或结果为boolean型判断，则用if-else</p><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><p><em>注</em>：</p><p>（1）至少执行一次</p><p>（2）do…while和while的判断条件是一样的</p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平Java视频学习day3</title>
      <link href="/2024/04/19/%E9%9F%A9%E9%A1%BA%E5%B9%B3Java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day3/"/>
      <url>/2024/04/19/%E9%9F%A9%E9%A1%BA%E5%B9%B3Java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day3/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="字符码表"><a href="#字符码表" class="headerlink" title="字符码表"></a>字符码表</h2><p>（1）ASCII码：1个字节表示128个字符（ASCII码扩展能表示256个字符）</p><p>（2）Unicode码：固定大小的编码，2个字节表示65536个字符，其中字母和汉字等统一占2个字节（Unicode码兼容ASCII码）</p><p>（3）UTF-8：是互联网上使用最广的Unicode的实现方式，大小可变的编码，使用1-4个字节表示一个符号，字母使用1个字节，拉丁文使用2字节，汉字使用3个字节</p><p>（4）GBK：可以表示汉字，且范围广，字母使用1个字节，汉字使用2个字节</p><p>（5）BB2312：可以表示汉字，表示范围小于gbk</p><p>（6）BIG5：繁体中文</p><p><em>注意</em>：&#x3D;&#x3D;Java使用Unicode字符集，并设计<code>char</code>为固定的16位宽（即2个字节）。这使得每个<code>char</code>可以表示65536个不同的字符，足以覆盖大多数字符集，包括基本的多语种平面（BMP）中的字符。而c++中<code>char</code>占一个字节，只能表示256个字符，即只能表示ASCII码（扩展）&#x3D;&#x3D;</p><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3Java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day3/image-20240419151454790.png" alt="image-20240419151454790"></p><p><em>注</em>：</p><p>（1）Java中float占用4个字节，long占用8个字节，但实际上float的表示范围比long大。因为float存储方式是符号位、指数位和尾数位，其中指数位占8bit，所以float范围是-2^127<del>2^127。而long的范围是-2^63</del>2^63-1，所以float表示范围比long大，但是显然精度会下降，因为float精度最多为23+1（二进制），而long精度最多为64</p><p>（2）多种类型的数据混合运算时，系统自动将所有数据转换成容量最大的数据类型再计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> n1 + <span class="number">1.1</span>;<span class="comment">// 错误，1.1是double型，计算完后右边是double型，而左边是float型</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> n1 + <span class="number">1.1</span>;<span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">s = s - <span class="number">9</span>;<span class="comment">//错误，int不能转为short</span></span><br></pre></td></tr></table></figure><p>（3）（byte，short）和char之间不会自动转换，但是它们三者可以计算（单独或混合运算），计算时首先转为int型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> b1;<span class="comment">// 错误，byte不能自动转为char</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> b2 + s1;<span class="comment">// 错误，int不能转为short</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> b2 + s1;<span class="comment">// 正确</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> b1 + b2;<span class="comment">//错误，int不能转为byte</span></span><br></pre></td></tr></table></figure><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3Java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day3/image-20240419160528298.png" alt="image-20240419160528298"></p><p><em>注意</em>：</p><p>（1）强转符号只针对最近的操作数有效</p><p>（2）char类型可以保存int常量值。但不能保存int变量值</p><p>（3）Java中的boolean和int没关系不能自动转换也不能强转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">// 正确</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">// 正确</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> m;<span class="comment">// 错误</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m;<span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><h3 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h3><p>（1）基本数据类型-&gt;String</p><p>“+”如果有一边为字符串时则做拼接运算得到新的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;<span class="comment">// 结果为true</span></span><br></pre></td></tr></table></figure><p>（2）String-&gt;基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line">System.out.println(num);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;12.3&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> Double.parseDouble(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String-&gt;char，取字符串第一个字符</span></span><br><span class="line">System.out.println(s.charAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>（1）左操作数 % 右操作数，结果的正负只与左操作数的正负有关</p><p>（2）自增、自减使用到了临时变量，且进行强制类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = i++;</span><br><span class="line">System.out.println(i);<span class="comment">// 结果为1，tmp = i; i = i + 1; i = tmp;而不是i = i; i = i + 1;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = ++i;</span><br><span class="line">System.out.println(i);<span class="comment">// 结果为2，i = i + 1; tmp = i; i = tmp;</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b++; <span class="comment">// 等价 b = (byte)(b + 1);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day2</title>
      <link href="/2024/04/18/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day2/"/>
      <url>/2024/04/18/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day2/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="加号的使用"><a href="#加号的使用" class="headerlink" title="加号的使用"></a>加号的使用</h2><p>（1）“+”左右两边都是数值型进行加法运算，如果有一边为字符串时则做拼接运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + <span class="number">10</span>);<span class="comment">// 结果是a10</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">10</span>);<span class="comment">// 结果是97+10=107，&#x27;a&#x27;转为int计算，结果为int</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p> （1）数据类型分为基本数据类型和引用数据类型（类class、接口interface和数组[]）</p><p>（2）&#x3D;&#x3D;Java的整数类型有固定的范围和字段长度，不受具体os的影响以保证Java程序的可移植性。而C++的整数类型大小取决于编译器实现和运行的操作系统&#x3D;&#x3D;</p><p>（3）Java的整型常量默认为int型，声明long型常量须后加’ L’，浮点型常量默认为double型，声明float型常量须后加’f’或’F’</p><p> （4）注意下面的问题：8.1不能精准的用二进制表示（整数都可以精准表示，小数不行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">8.1</span> / <span class="number">3</span>;<span class="comment">// 等于2.69999999...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;不要在运算结果为小数情况下进行比较，而应该以两个数的差值的绝对值在某个精度范围内作为判断&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (Math.abs(num1 - num2) &lt; 0.000001)&#123;</span><br><span class="line">System.out.println(&quot;相等&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）注意下面两种情况的区别</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.<span class="built_in">println</span>(<span class="string">&#x27;b&#x27;</span> + <span class="number">1</span>);<span class="comment">// 结果是99</span></span><br><span class="line"><span class="type">char</span> x = <span class="string">&#x27;b&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(x);<span class="comment">// 结果是c</span></span><br></pre></td></tr></table></figure><p>（6）&#x3D;&#x3D;Java中不可以用0或非0的整数代替false或true，虽然C中可以&#x3D;&#x3D;</p><p>（7）将一个具体值赋给变量时先判断其范围，将一个变量赋给另一个变量时要注意是否能自动类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">// 正确，10在-128~127中，故可以赋值</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> b;<span class="comment">// 错误，byte不能自动转换成c</span></span><br></pre></td></tr></table></figure><h2 id="Java类的组织形式"><a href="#Java类的组织形式" class="headerlink" title="Java类的组织形式"></a>Java类的组织形式</h2><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day2/image-20240418213516742.png" alt="image-20240418213516742"></p><p>Java API在线文档：<a href="https://www.matools.com/api">https://www.matools.com/api</a></p><h3 id="如何检索指定类"><a href="#如何检索指定类" class="headerlink" title="如何检索指定类"></a>如何检索指定类</h3><p>（1）包-&gt;类-&gt;方法</p><p>（2）直接索引，如搜Math</p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发手册学习</title>
      <link href="/2024/04/17/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/17/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h1><h2 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h2><p>（1）包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，类名如果有复数含义可以使用复数形式：应用工具类包名com.alibaba.ai.util、类名为MessageUtils</p><p>（2）类名、接口名使用大驼峰命名法：MarcoPolo、UserDO</p><p>（3）方法名、参数名、变量名统一使用小驼峰法：localValue、getHttpMessage()、inputUserId</p><p>（4）常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长：MAX_STOCK_COUNT</p><p>（5）抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类名开始，以Test结尾</p><p>（6）接口类中的方法和属性不要加任何修饰符号（public也不要加），保持代码简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量肯定是与接口方法相关，并且是整个应用的基础常量：接口方法名void commit();接口基础常量String COMPANY &#x3D; “alibaba”;</p><p>（7）类型域中括号紧挨相连表示数组：int[] arrayDemo;</p><h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><p>（1）在long或者Long赋值时，数值后使用大写L（小写l容易和1混淆）：Long a &#x3D; 2L；</p><p>（2）不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护：缓存相关常量放在类CacheConsts下；系统配置相关常量放在类ConfigConsts下</p><h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><p>（1）如果大括号内为空，则简洁写成{}不需要还寒；如果是非空代码块：左大括号前不换行。 左大括号后换行。 3） 右大括号前换行。 右大括号后还有 else 等代码则不换行 表示终止的右大括号后必须换行</p><p>（2）左大括号前需要空格</p><p>（3）左小括号与字符之间不需要空格</p><p>（4）if&#x2F;for&#x2F;while&#x2F;switch&#x2F;do等保留字与括号之间必须加空格</p><p>（5）任何二目、三目运算符左右两边需加空格，如&#x3D;、&amp;&amp;、加减乘除等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进 4 个空格</span></span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">say</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符的左右必须有一个空格</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(say);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左大括号前加空格且不换行；左大括号后换行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右大括号前换行，右大括号后有 else，不用换行</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在右大括号后直接结束，则必须换行</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）单行字数限制不超过120个，超出需换行，遵循如下原则：第二行相对第一行缩进4个空格，从第三行开始不再缩进；运算符与下文一起换行；方法调用的点符号与下文一起换行；方法调用中的多个参数需要换行时，在逗号后进行；在左括号后换行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = new StringBuffer();</span><br><span class="line"></span><br><span class="line">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span><br><span class="line">sb.append(&quot;zi&quot;).append(&quot;xin&quot;)...</span><br><span class="line">.append(&quot;huang&quot;)...</span><br><span class="line">.append(&quot;huang&quot;)...</span><br><span class="line">.append(&quot;huang&quot;);</span><br></pre></td></tr></table></figure><p>（5）不同逻辑、不同语义、不同业务之间的代码之间插入一个空行分隔开以提高可读性，没必要插入多个空行</p><p>（6）注释的双斜线与注释内容之间有且仅有一个空格。类、方法的注视要以javadoc的方式来写</p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime的一些小技巧</title>
      <link href="/2024/04/17/Sublime%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2024/04/17/Sublime%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>（1）cmd+&#x2F;：快速注释</p><p>（2）cmd+shift+d：复制光标所在行</p><p>（3）cmd+x：删除当前行</p>]]></content>
      
      
      <categories>
          
          <category> Triks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩顺平java视频学习day1</title>
      <link href="/2024/04/17/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day1/"/>
      <url>/2024/04/17/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java重点知识"><a href="#Java重点知识" class="headerlink" title="Java重点知识"></a>Java重点知识</h1><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>Java概述：Java的运行机制、JDK、Java开发规范</p><p>变量：数据类型</p><p>运算符：二进制</p><p>控制结构：循环</p><p>数组、排序和查找：数组</p><p>面向对象编程（基础）：成员方法及其传参机制、构造器</p><p>面向对象编程（中级）：封装、继承、多态</p><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><p>面向对象（高级）：类变量和类方法、接口、内部类</p><p>Exception：异常体系图、异常处理</p><p>常用类：String、StringBuffer、StringBuilder</p><p>集合：集合框架体系、Collection-List（ArrayList、Vector）、Collection-Set（HashSet）、Map（HashMap）</p><p>泛型：自定义泛型</p><p>线程（基础）：线程使用</p><p>IO流：输入流、输出流</p><h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>网络编程：TCP编程</p><p>反射：反射获取类的结构信息</p><p>Mysql（基础）：Mysql数据类型、CRUD、函数、外连接、索引</p><p>JDBC和连接池：JDBC API、事务、连接池（Druid最重要）、DAO增删改查-BasicDao</p><p>正则表达式（非常实用）：三个常用类、分组捕获反向引用</p><p>Java8新特性：Lambda、函数式接口、stream API</p><p>Java11新特性（含Java9、Java10）：类型推断、集合增强API</p><h2 id="JavaSE和JavaEE"><a href="#JavaSE和JavaEE" class="headerlink" title="JavaSE和JavaEE"></a>JavaSE和JavaEE</h2><p>JavaSE（Java Standard Edition）：标准版</p><p>JavaEE（Java Enterprise Edition）：企业版</p><h1 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h1><h2 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h2><p>（1）面向对象oop（object-oriented programming）</p><p>（2）健壮。强类型机制、异常处理、垃圾多自动收集是其健壮性的重要保证</p><p>（3）跨平台</p><p>（4）解释型</p><h2 id="JVM、JDK和JRE"><a href="#JVM、JDK和JRE" class="headerlink" title="JVM、JDK和JRE"></a>JVM、JDK和JRE</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java虚拟机（Java Virtual Machine）。是一个虚拟的计算机，包含在&#x3D;&#x3D;JDK&#x3D;&#x3D;中。它由一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆等组成。该机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</p><p><img src="/../../../../source/images/%E9%9F%A9%E9%A1%BA%E5%B9%B3java%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0day1/image-20240417104314211.png" alt="image-20240417104314211"></p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>Java开发工具包（Java Development Kit），JDK &#x3D; JRE + Java的开发工具（java、javac、javadoc、javap等）。如果需要开发Java程序，需要安装JDK（需要开发工具来编译.java文件）</p><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>Java运行环境（Java Runtime Environment），JRE &#x3D; JVM + Java的核心类库（java.lang包、java.util包等）。如果想要运行一个开发好的Java程序，只需安装JRE（如果只想运行开发好的.class文件只需要用JVM+核心类库）</p><h3 id="macOS中如何查看JDK和JRE"><a href="#macOS中如何查看JDK和JRE" class="headerlink" title="macOS中如何查看JDK和JRE"></a>macOS中如何查看JDK和JRE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure><p>可以得到如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Matching Java Virtual Machines (2):</span><br><span class="line">    1.8.291.10 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java&quot; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br><span class="line">    1.8.0_291 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java SE 8&quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home</span><br><span class="line">/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br></pre></td></tr></table></figure><p>“Internet Plug-Ins”路径指向Java Applet插件的JRE安装（主要是支持浏览器中运行的Java Applets），发现里面有java指令</p><p>“Java”路径指向一个完整的JDK安装，其中包括JRE</p><p>&#x3D;&#x3D;注&#x3D;&#x3D;：JRE和JDK中都有java指令，但只有JDK中有javac指令</p><h2 id="macOS下Java的版本管理"><a href="#macOS下Java的版本管理" class="headerlink" title="macOS下Java的版本管理"></a>macOS下Java的版本管理</h2><h3 id="多版本的JDK"><a href="#多版本的JDK" class="headerlink" title="多版本的JDK"></a>多版本的JDK</h3><p>（1）已经安装了Java 8，接下来安装Java 11</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.oracle.com/java/technologies/downloads/#java11-mac</span><br></pre></td></tr></table></figure><p>选择x86的（arm是M1芯片）</p><p>（2）查看所有的JDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home -V</span><br><span class="line">/usr/libexec/java_home -v 11 #查看Java11的路径</span><br></pre></td></tr></table></figure><p>（3）在~&#x2F;.zshrc中设置默认的JDK版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 设置默认Java版本（输入jdk8时切换成Java8，输入jdk11时切换成JDK11）</span><br><span class="line">export JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home</span><br><span class="line">export JAVA_11_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home</span><br><span class="line">export JAVA_HOME=`/usr/libexec/java_home`</span><br><span class="line">alias jdk8=&quot;export JAVA_HOME=$JAVA_8_HOME&quot;</span><br><span class="line">alias jdk11=&quot;export JAVA_HOME=$JAVA_11_HOME&quot;</span><br><span class="line">export PATH=&quot;JAVA_HOME/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><p>（4）参考文献</p><p><a href="https://blog.csdn.net/u014163312/article/details/123297401">https://blog.csdn.net/u014163312/article/details/123297401</a></p><h3 id="IDEA下的多版本JDK"><a href="#IDEA下的多版本JDK" class="headerlink" title="IDEA下的多版本JDK"></a>IDEA下的多版本JDK</h3><p>（1）cmd+；打开项目结构</p><p>（2）选择不同的SDK（Software Development Kit，可以是任何的开发工具集，包括JDK）</p><h2 id="Java快速入门"><a href="#Java快速入门" class="headerlink" title="Java快速入门"></a>Java快速入门</h2><h3 id="macOS下使用Sublime编写Java文件"><a href="#macOS下使用Sublime编写Java文件" class="headerlink" title="macOS下使用Sublime编写Java文件"></a>macOS下使用Sublime编写Java文件</h3><h4 id="macOS下快速打开Java程序并执行"><a href="#macOS下快速打开Java程序并执行" class="headerlink" title="macOS下快速打开Java程序并执行"></a>macOS下快速打开Java程序并执行</h4><p>（1）cmd+空格然后输入java找到对应文件夹</p><p>（2）右键-服务-New iterm2 Window Here</p><p>（3）在iterm中用sublime打开对应文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a open -a Sublime\ Text Hello.java</span><br></pre></td></tr></table></figure><p>或者右键-显示简介在打开方式中修改默认设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open Hello.java</span><br></pre></td></tr></table></figure><p>（4）执行Java程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br><span class="line">java Hello</span><br></pre></td></tr></table></figure><p><em>注</em>：</p><p>（1）如果在iterm输入“javac Hello.java”后出现以下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                                             Hello.java:2: 错误: 编码 UTF-8 的不可映射字符 (0xBD)</span><br><span class="line">public static void main(String[] args)&#123;//��ʾһ��������</span><br><span class="line">                                                  ^</span><br><span class="line">Hello.java:2: 错误: 编码 UTF-8 的不可映射字符 (0xB7)</span><br><span class="line">public static void main(String[] args)&#123;//��ʾһ��������</span><br></pre></td></tr></table></figure><p>在Sumbline中File-Save with Encoding中选择UTF-8（因为iterm默认用UTF-8编码）</p><p>（2）为什么不是“java Hello.class”而是”java Hello”：其实这里的Hello是指Java程序中的Hello主类，如果是Hello.class，则会尝试去找一个叫Hello.class的类。即java后面指定的是类名而非类文件名</p><h3 id="Java的运行机制"><a href="#Java的运行机制" class="headerlink" title="&#x3D;&#x3D;Java的运行机制&#x3D;&#x3D;"></a>&#x3D;&#x3D;Java的运行机制&#x3D;&#x3D;</h3><p>（1）编译（javac指令：将.java文件编译成.class文件）</p><p>开发者使用Java编写源代码Test.java，再通过Java编译器编译成Java字节码Test.class（字节码是一种中间形式的代码，与任何特定的硬件或os都无关）</p><p>（2）运行（java指令：将.class文件装载到对应的JVM执行）</p><p>字节码不是任何传统意义上的机器代码，需要一个运行环境即JVM来执行，不同的os有各自的JVM。当在os上执行Java程序时，JVM将字节码转换成对应os可理解的机器指令执行</p><h3 id="为什么Java具有跨平台特性"><a href="#为什么Java具有跨平台特性" class="headerlink" title="&#x3D;&#x3D;为什么Java具有跨平台特性&#x3D;&#x3D;"></a>&#x3D;&#x3D;为什么Java具有跨平台特性&#x3D;&#x3D;</h3><p>（1）Java程序编译后生成的是字节码，而不是特定平台的机器代码，这些字节码可以在任何安装了JVM的平台上运行（c++编译后生成特定平台的机器代码）</p><p>（2）Java提供了一致的API和标准库，这样Java程序员不需要考虑不同os或硬件的差异</p><p>（3）Java编译器不是生成特定平台的机器代码，这意味着相同的Java源代码可以在不同平台上编译</p><p>（4）不同厂商实现的JVM遵循了JVM规范，保证了在不同平台上的行为一致性</p><h3 id="Java开发注意事项和细节说明"><a href="#Java开发注意事项和细节说明" class="headerlink" title="Java开发注意事项和细节说明"></a>Java开发注意事项和细节说明</h3><p>（1）Java源文件的基本组成部分是类，如Hello类，每个类都对应一个.class文件。一个源文件中最多只能有一个public类，文件名必须以该类名命名</p><p>（2）Java应用程序的执行入口是main()方法，它有固定的书写格式。main方法也可以写在非public类中，然后指定运行非public类。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;<span class="comment">//Hello是一个共有的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;<span class="comment">//表示一个主方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello,world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;<span class="comment">//表示一个主方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello,dog!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;<span class="comment">//表示一个主方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello,cat!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// IDEA中想要执行那个main方法就让光标停在哪里</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br><span class="line">java Hello</span><br><span class="line">java Dog</span><br><span class="line">java Cat</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><p>注释内容可以被JDK提供的工具javadoc解析，生成一套以网页文件形式体现的程序的说明文档，一般写在类中</p><h5 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author Yevette</span><br><span class="line"> * @version 1.0</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h5 id="生成对应的文档注释"><a href="#生成对应的文档注释" class="headerlink" title="生成对应的文档注释"></a>生成对应的文档注释</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -d 文件夹名 -author -version Hello.java</span><br></pre></td></tr></table></figure><h5 id="javadoc标签"><a href="#javadoc标签" class="headerlink" title="javadoc标签"></a>javadoc标签</h5><p>如@author、@version、@param等</p>]]></content>
      
      
      <categories>
          
          <category> Internship </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何卸载并重装hexo</title>
      <link href="/2024/04/16/%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E5%B9%B6%E9%87%8D%E8%A3%85hexo/"/>
      <url>/2024/04/16/%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD%E5%B9%B6%E9%87%8D%E8%A3%85hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="重装npm和node-js"><a href="#重装npm和node-js" class="headerlink" title="重装npm和node.js"></a>重装npm和node.js</h2><h3 id="卸载nmp"><a href="#卸载nmp" class="headerlink" title="卸载nmp"></a>卸载nmp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm uninstall npm -g</span><br></pre></td></tr></table></figure><p>如果不能卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/lib/node_modules</span><br></pre></td></tr></table></figure><p>然后删除npm文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmp -v</span><br></pre></td></tr></table></figure><p>测试一下，如果not found则卸载成功</p><h3 id="卸载node-js"><a href="#卸载node-js" class="headerlink" title="卸载node.js"></a>卸载node.js</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*</span><br><span class="line"></span><br><span class="line">sudo rm -rf /usr/local/include/node /Users/$USER/.npm</span><br><span class="line"></span><br><span class="line">sudo rm /usr/local/bin/node</span><br><span class="line"></span><br><span class="line">sudo rm /usr/local/share/man/man1/node.1</span><br><span class="line"></span><br><span class="line">sudo rm /usr/local/lib/dtrace/node.d</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>测试一下，如果not found则卸载成功</p><h3 id="重装npm和node-js-1"><a href="#重装npm和node-js-1" class="headerlink" title="重装npm和node.js"></a>重装npm和node.js</h3><p>官网重新下载</p><p><a href="https://nodejs.org/en/download/current/">https://nodejs.org/en/download/current/</a></p><p>npm 默认会放到 <code>/usr/lib/node_modules</code> 目录下，普通用户没有权限也不建议修改权限或使用 sudo，所以可以添加环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">export PATH=&quot;/usr/local/bin:$PATH&quot;</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="重装hexo"><a href="#重装hexo" class="headerlink" title="重装hexo"></a>重装hexo</h2><h3 id="卸载hexo"><a href="#卸载hexo" class="headerlink" title="卸载hexo"></a>卸载hexo</h3><p>将原先网站文件夹的内容备份后删除该文件夹（主要是source、themes、scaffolds、_config.yml）</p><h3 id="重装hexo-1"><a href="#重装hexo-1" class="headerlink" title="重装hexo"></a>重装hexo</h3><p>（1）先用nmp安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>注：如果超时可以将npm镜像站换成国内的，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>（2）新建网站文件夹blog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>（3）部署到网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/xx/xx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="部分功能添加"><a href="#部分功能添加" class="headerlink" title="部分功能添加"></a>部分功能添加</h2><h3 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>然后在_config.yml中设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>注：如果要设置不同的外观，可以去blog&#x2F;themes&#x2F;next下的_config.yml中设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h3 id="生成tag和categories目录页"><a href="#生成tag和categories目录页" class="headerlink" title="生成tag和categories目录页"></a>生成tag和categories目录页</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>然后在source&#x2F;tag&#x2F;index.md中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>顺便修改title</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br></pre></td></tr></table></figure><p>在source&#x2F;categories&#x2F;index.md中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>顺便修改title</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br></pre></td></tr></table></figure><h3 id="博文中添加tag和categories"><a href="#博文中添加tag和categories" class="headerlink" title="博文中添加tag和categories"></a>博文中添加tag和categories</h3><p>在scaffolds&#x2F;post.md中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">categories:</span><br></pre></td></tr></table></figure><h3 id="字数和阅读时长显示"><a href="#字数和阅读时长显示" class="headerlink" title="字数和阅读时长显示"></a>字数和阅读时长显示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>在themes&#x2F;_config.yml中搜索Post wordcount display settings，然后这一块改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/next-theme/hexo-word-counter</span><br><span class="line"># 字数显示配置 需要安装 npm i --save hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         # 单篇 字数统计</span><br><span class="line">  min2read: true          # 单篇 阅读时长</span><br><span class="line">  totalcount: false       # 网站 字数统计</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><h3 id="社区侧边栏链接配置"><a href="#社区侧边栏链接配置" class="headerlink" title="社区侧边栏链接配置"></a>社区侧边栏链接配置</h3><p>themes&#x2F;_config.yml中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 社区侧边栏链接配置</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/xx || fab fa-github</span><br><span class="line">  E-Mail: mailto:xx@gmail.com || fa fa-envelope</span><br></pre></td></tr></table></figure><h3 id="不显示全文"><a href="#不显示全文" class="headerlink" title="不显示全文"></a>不显示全文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure><h2 id="其他功能添加"><a href="#其他功能添加" class="headerlink" title="其他功能添加"></a>其他功能添加</h2><p>（1）添加站内搜索功能：<a href="https://blog.csdn.net/wangqingchuan92/article/details/111546625">https://blog.csdn.net/wangqingchuan92/article/details/111546625</a></p><p>（2）设置菜单：<a href="https://theme-next.iissnan.com/getting-started.html#menu-settings">https://theme-next.iissnan.com/getting-started.html#menu-settings</a></p><p>（3）新老版本：<a href="https://blog.csdn.net/Sky_True/article/details/104435997/">https://blog.csdn.net/Sky_True/article/details/104435997/</a></p><p>（4）实现搜索引擎搜索：<a href="https://www.cnblogs.com/shwee/p/11421156.html">https://www.cnblogs.com/shwee/p/11421156.html</a></p><h2 id="config-yml文件的配置"><a href="#config-yml文件的配置" class="headerlink" title="_config.yml文件的配置"></a>_config.yml文件的配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site修改</span><br><span class="line">title: xx&#x27;s Blog</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: xx</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://xx.github.io#修改</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :year/:month/:title.md # 修改，可以加入/:day/</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#x27;&#x27;</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">syntax_highlighter: highlight.js</span><br><span class="line">highlight:</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br><span class="line">meta_generator: true</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br><span class="line">updated_option: &#x27;mtime&#x27;</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Include / Exclude file(s)</span><br><span class="line">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment修改</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/xx/xx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>（1）md文档编写时，##后要空一格，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### test</span><br></pre></td></tr></table></figure><p>（2）新建名字带空格的md文件，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;cpp primer第5版阅读笔记&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Solutions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
